"""Renamed columns across models

Revision ID: 5cf9b21a467e
Revises: 
Create Date: 2025-08-20 14:44:18.588092

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5cf9b21a467e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admin',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userName', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('isAdmin', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_admin_userName'), 'admin', ['userName'], unique=True)
    op.create_table('liquidation_partners',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('Liquidator_ID', sa.String(), nullable=True),
    sa.Column('Liquidator_Name', sa.String(), nullable=True),
    sa.Column('Liquidator_Type', sa.String(), nullable=True),
    sa.Column('Latitude', sa.Float(), nullable=True),
    sa.Column('Longitude', sa.Float(), nullable=True),
    sa.Column('Offer Price (% of MRP)', sa.Float(), nullable=True),
    sa.Column('Pickup SLA (in days)', sa.Integer(), nullable=True),
    sa.Column('Quantity_Handling_Capacity_Fresh_Produce', sa.Integer(), nullable=True),
    sa.Column('Quantity_Handling_Capacity_Dry_Goods', sa.Integer(), nullable=True),
    sa.Column('Quantity_Handling_Capacity_GM', sa.Integer(), nullable=True),
    sa.Column('Past Fulfillment Success Rate (%)', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_liquidation_partners_Liquidator_ID'), 'liquidation_partners', ['Liquidator_ID'], unique=False)
    op.create_index(op.f('ix_liquidation_partners_id'), 'liquidation_partners', ['id'], unique=False)
    op.create_table('ngo_partners',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('NGO_ID', sa.String(), nullable=True),
    sa.Column('NGO_Name', sa.String(), nullable=True),
    sa.Column('NGO_Type', sa.String(), nullable=True),
    sa.Column('NGO_LAT', sa.Float(), nullable=True),
    sa.Column('NGO_LONG', sa.Float(), nullable=True),
    sa.Column('Acceptance_Criteria_Met', sa.Boolean(), nullable=True),
    sa.Column('Acceptance_Capacity_Fresh_Produce', sa.Integer(), nullable=True),
    sa.Column('Acceptance_Capacity_Dry_Goods', sa.Integer(), nullable=True),
    sa.Column('Acceptance_Capacity_GM', sa.Integer(), nullable=True),
    sa.Column('Past_Donation_Success_Rate', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ngo_partners_NGO_ID'), 'ngo_partners', ['NGO_ID'], unique=False)
    op.create_index(op.f('ix_ngo_partners_id'), 'ngo_partners', ['id'], unique=False)
    op.create_table('stores',
    sa.Column('Store_ID', sa.String(), nullable=False),
    sa.Column('Store_Name', sa.String(), nullable=True),
    sa.Column('Store_City', sa.String(), nullable=True),
    sa.Column('Store_State', sa.String(), nullable=True),
    sa.Column('Store_Region', sa.String(), nullable=True),
    sa.Column('Latitude', sa.Float(), nullable=True),
    sa.Column('Longitude', sa.Float(), nullable=True),
    sa.Column('Capacity_Limit', sa.Integer(), nullable=True),
    sa.Column('Current_Capacity', sa.Integer(), nullable=True),
    sa.Column('Performance_Score', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('Store_ID')
    )
    op.create_index(op.f('ix_stores_Store_ID'), 'stores', ['Store_ID'], unique=False)
    op.create_table('inventory',
    sa.Column('SKU_ID', sa.String(), nullable=False),
    sa.Column('Product_Name', sa.String(), nullable=True),
    sa.Column('Category', sa.String(), nullable=True),
    sa.Column('Store_ID', sa.String(), nullable=False),
    sa.Column('Supplier_Name', sa.String(), nullable=True),
    sa.Column('Received_Date', sa.Date(), nullable=True),
    sa.Column('Expiry_Date', sa.Date(), nullable=True),
    sa.Column('System_Quantity_Received', sa.Integer(), nullable=True),
    sa.Column('Actual_Quantity_Received', sa.Integer(), nullable=True),
    sa.Column('Difference_System_Actual', sa.Integer(), nullable=True),
    sa.Column('Number_Damaged_Units', sa.Integer(), nullable=True),
    sa.Column('Number_Dump_Units', sa.Integer(), nullable=True),
    sa.Column('Number_Expired_Units', sa.Integer(), nullable=True),
    sa.Column('Inventory_On_Hand', sa.Integer(), nullable=True),
    sa.Column('Unit_Sold', sa.Integer(), nullable=True),
    sa.Column('Days_Active', sa.Integer(), nullable=True),
    sa.Column('Shelf_Life', sa.Integer(), nullable=True),
    sa.Column('Sell_Through_Rate_Per_Day', sa.Float(), nullable=True),
    sa.Column('Sell_Through_Rate', sa.Float(), nullable=True),
    sa.Column('Shelf_Life_Remaining', sa.Integer(), nullable=True),
    sa.Column('Shelf_Life_Used_Pct', sa.Float(), nullable=True),
    sa.Column('Inventory_Status', sa.String(), nullable=True),
    sa.Column('Cost_Price_CP', sa.Float(), nullable=True),
    sa.Column('Selling_Price_SP', sa.Float(), nullable=True),
    sa.Column('Original_Revenue_no_return_remediation', sa.Float(), nullable=True),
    sa.Column('COGS', sa.Float(), nullable=True),
    sa.Column('Original_Gross_Margin', sa.Float(), nullable=True),
    sa.Column('Inventory_Age_Days', sa.Integer(), nullable=True),
    sa.Column('Is_Returnable', sa.Boolean(), nullable=True),
    sa.Column('Is_Perishable', sa.Boolean(), nullable=True),
    sa.Column('Region_Historical', sa.String(), nullable=True),
    sa.Column('Markdown_Pct', sa.Float(), nullable=True),
    sa.Column('Days_of_Supply', sa.Integer(), nullable=True),
    sa.Column('Required_Markdown_Pct', sa.Float(), nullable=True),
    sa.Column('Predicted_Upliftment_Factor', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['Store_ID'], ['stores.Store_ID'], ),
    sa.PrimaryKeyConstraint('SKU_ID')
    )
    op.create_index(op.f('ix_inventory_SKU_ID'), 'inventory', ['SKU_ID'], unique=False)
    op.create_table('remediation_recommendations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sku_id', sa.String(), nullable=False),
    sa.Column('store_id', sa.String(), nullable=False),
    sa.Column('product_name', sa.String(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('received_date', sa.Date(), nullable=True),
    sa.Column('quantity_on_hand', sa.Integer(), nullable=True),
    sa.Column('sell_through_rate', sa.Float(), nullable=True),
    sa.Column('Sell_Through_Rate_Per_Day', sa.Float(), nullable=True),
    sa.Column('shelf_life_remaining', sa.Integer(), nullable=True),
    sa.Column('inventory_age_days', sa.Integer(), nullable=True),
    sa.Column('shrinkage_risk', sa.String(), nullable=True),
    sa.Column('risk_level', sa.String(), nullable=True),
    sa.Column('recommended_action', sa.String(), nullable=True),
    sa.Column('target_name', sa.String(), nullable=True),
    sa.Column('action_quantity', sa.Float(), nullable=True),
    sa.Column('unit_cost', sa.Float(), nullable=True),
    sa.Column('unit_price', sa.Float(), nullable=True),
    sa.Column('original_revenue', sa.Float(), nullable=True),
    sa.Column('cogs', sa.Float(), nullable=True),
    sa.Column('gross_margin_pct', sa.Float(), nullable=True),
    sa.Column('expected_recovery', sa.Float(), nullable=True),
    sa.Column('net_loss_mitigation', sa.Float(), nullable=True),
    sa.Column('tax_benefit_amount', sa.Float(), nullable=True),
    sa.Column('recommendation_rank', sa.Integer(), nullable=True),
    sa.Column('group_key', sa.String(), nullable=True),
    sa.Column('issue_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['sku_id'], ['inventory.SKU_ID'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.Store_ID'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_remediation_recommendations_id'), 'remediation_recommendations', ['id'], unique=False)
    op.create_table('return_remediation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('return_id', sa.String(), nullable=True),
    sa.Column('store_id', sa.String(), nullable=False),
    sa.Column('sku_id', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('return_reason', sa.String(), nullable=True),
    sa.Column('item_condition', sa.String(), nullable=True),
    sa.Column('quantity_returned', sa.Integer(), nullable=True),
    sa.Column('days_left', sa.Integer(), nullable=True),
    sa.Column('risk_level', sa.String(), nullable=True),
    sa.Column('recommended_action', sa.String(), nullable=True),
    sa.Column('target_name', sa.String(), nullable=True),
    sa.Column('return_date', sa.Date(), nullable=True),
    sa.Column('cost_price(cp)', sa.Float(), nullable=True),
    sa.Column('selling_price(sp)', sa.Float(), nullable=True),
    sa.Column('gross_margin_pct', sa.Float(), nullable=True),
    sa.Column('expected_recovery', sa.Float(), nullable=True),
    sa.Column('tax_benefit_amount', sa.Float(), nullable=True),
    sa.Column('net_loss_mitigation', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['sku_id'], ['inventory.SKU_ID'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.Store_ID'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_return_remediation_id'), 'return_remediation', ['id'], unique=False)
    op.create_index(op.f('ix_return_remediation_return_id'), 'return_remediation', ['return_id'], unique=False)
    op.create_table('returns',
    sa.Column('return_id', sa.String(), nullable=False),
    sa.Column('store_id', sa.String(), nullable=False),
    sa.Column('sku_id', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('product_name', sa.String(), nullable=True),
    sa.Column('return_reason', sa.String(), nullable=True),
    sa.Column('quantity_returned', sa.Integer(), nullable=True),
    sa.Column('Cost_Price(CP)', sa.Float(), nullable=True),
    sa.Column('Selling_Price(SP)', sa.Float(), nullable=True),
    sa.Column('shelf_life', sa.Integer(), nullable=True),
    sa.Column('days_left', sa.Integer(), nullable=True),
    sa.Column('return_date', sa.Date(), nullable=True),
    sa.Column('customer_id', sa.String(), nullable=True),
    sa.Column('original_purchase_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.Date(), nullable=True),
    sa.Column('updated_at', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['sku_id'], ['inventory.SKU_ID'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.Store_ID'], ),
    sa.PrimaryKeyConstraint('return_id')
    )
    op.create_index(op.f('ix_returns_return_id'), 'returns', ['return_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_returns_return_id'), table_name='returns')
    op.drop_table('returns')
    op.drop_index(op.f('ix_return_remediation_return_id'), table_name='return_remediation')
    op.drop_index(op.f('ix_return_remediation_id'), table_name='return_remediation')
    op.drop_table('return_remediation')
    op.drop_index(op.f('ix_remediation_recommendations_id'), table_name='remediation_recommendations')
    op.drop_table('remediation_recommendations')
    op.drop_index(op.f('ix_inventory_SKU_ID'), table_name='inventory')
    op.drop_table('inventory')
    op.drop_index(op.f('ix_stores_Store_ID'), table_name='stores')
    op.drop_table('stores')
    op.drop_index(op.f('ix_ngo_partners_id'), table_name='ngo_partners')
    op.drop_index(op.f('ix_ngo_partners_NGO_ID'), table_name='ngo_partners')
    op.drop_table('ngo_partners')
    op.drop_index(op.f('ix_liquidation_partners_id'), table_name='liquidation_partners')
    op.drop_index(op.f('ix_liquidation_partners_Liquidator_ID'), table_name='liquidation_partners')
    op.drop_table('liquidation_partners')
    op.drop_index(op.f('ix_admin_userName'), table_name='admin')
    op.drop_table('admin')
    # ### end Alembic commands ###
